import { render, screen, waitFor, fireEvent } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { describe, it, expect, beforeEach, vi } from 'vitest'
import React from 'react'
import { CharacterSheet } from '../../src/features/CharacterSheet/CharacterSheet'

describe('Character Sheet - Items/Equipment Tab Comprehensive Testing', () => {
  beforeEach(() => {
    localStorage.clear()
    vi.clearAllMocks()
    
    // Set desktop tab=1 which corresponds to Items tab in desktop layout
    Object.defineProperty(window, 'location', {
      writable: true,
      value: {
        search: '?id=test-character-items&tab=1',
        pathname: '/docs/tools/character-sheet',
        href: 'http://localhost:3000/docs/tools/character-sheet?id=test-character-items&tab=1',
        origin: 'http://localhost:3000',
        hash: '',
      }
    })
  })

  it('should navigate to items tab and display equipment management interface', async () => {
    const user = userEvent.setup()
    
    render(<CharacterSheet />)
    
    // Wait for initial render
    await waitFor(() => {
      const tabs = screen.queryAllByRole('tab')
      expect(tabs.length).toBeGreaterThan(0)
    }, { timeout: 2000 })
    
    // Find Items tab
    const itemsTab = screen.getByRole('tab', { name: /items/i })
    expect(itemsTab).toBeTruthy()
    
    // Click on Items tab
    await user.click(itemsTab)
    
    // Verify items content is displayed
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      const hasItemsContent = bodyText.toLowerCase().includes('item') || 
                              bodyText.toLowerCase().includes('equipment') ||
                              bodyText.toLowerCase().includes('weapon') || 
                              bodyText.toLowerCase().includes('armor')
      expect(hasItemsContent).toBe(true)
    }, { timeout: 2000 })
  })

  it('should handle weapon equipment and management', async () => {
    const user = userEvent.setup()
    
    render(<CharacterSheet />)
    
    await waitFor(() => {
      expect(screen.queryAllByRole('tab').length).toBeGreaterThan(0)
    }, { timeout: 2000 })
    
    const itemsTab = screen.getByRole('tab', { name: /items/i })
    await user.click(itemsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('item')
    }, { timeout: 2000 })
    
    // Test weapon inputs
    const textInputs = document.querySelectorAll('input[type="text"], input:not([type])')
    const selectElements = document.querySelectorAll('select')
    
    if (textInputs.length > 0) {
      const weaponInput = textInputs[0] as HTMLInputElement
      await user.clear(weaponInput)
      await user.type(weaponInput, 'Steel Sword')
      expect(weaponInput.value).toBe('Steel Sword')
    }
    
    if (selectElements.length > 0) {
      const weaponSelect = selectElements[0] as HTMLSelectElement
      if (weaponSelect.options.length > 1) {
        await user.selectOptions(weaponSelect, weaponSelect.options[1].value)
      }
    }
    
    expect(textInputs.length > 0 || selectElements.length > 0).toBe(true)
  })

  it('should handle armor equipment and armor value calculations', async () => {
    const user = userEvent.setup()
    
    render(<CharacterSheet />)
    
    await waitFor(() => {
      expect(screen.queryAllByRole('tab').length).toBeGreaterThan(0)
    }, { timeout: 2000 })
    
    const itemsTab = screen.getByRole('tab', { name: /items/i })
    await user.click(itemsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('item')
    }, { timeout: 2000 })
    
    // Test armor inputs
    const numericInputs = document.querySelectorAll('input[type="number"]')
    
    if (numericInputs.length > 0) {
      const armorInput = numericInputs[0] as HTMLInputElement
      await user.clear(armorInput)
      await user.type(armorInput, '5')
      expect(armorInput.value).toBe('5')
    }
    
    expect(numericInputs.length >= 0).toBe(true)
  })

  it('should handle inventory management and item addition/removal', async () => {
    const user = userEvent.setup()
    
    render(<CharacterSheet />)
    
    await waitFor(() => {
      expect(screen.queryAllByRole('tab').length).toBeGreaterThan(0)
    }, { timeout: 2000 })
    
    const itemsTab = screen.getByRole('tab', { name: /items/i })
    await user.click(itemsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('item')
    }, { timeout: 2000 })
    
    // Test inventory interactions
    const buttons = document.querySelectorAll('button')
    const inputs = document.querySelectorAll('input')
    
    if (buttons.length > 0) {
      const addButton = Array.from(buttons).find(btn => 
        btn.textContent?.toLowerCase().includes('add') ||
        btn.textContent?.toLowerCase().includes('+')
      )
      if (addButton) {
        await user.click(addButton)
      }
    }
    
    expect(buttons.length > 0 || inputs.length > 0).toBe(true)
  })

  it('should handle item properties and special effects', async () => {
    const user = userEvent.setup()
    
    render(<CharacterSheet />)
    
    await waitFor(() => {
      expect(screen.queryAllByRole('tab').length).toBeGreaterThan(0)
    }, { timeout: 2000 })
    
    const itemsTab = screen.getByRole('tab', { name: /items/i })
    await user.click(itemsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('item')
    }, { timeout: 2000 })
    
    // Test special properties
    const checkboxes = document.querySelectorAll('input[type="checkbox"]')
    const textareas = document.querySelectorAll('textarea')
    
    if (checkboxes.length > 0) {
      const propertyCheckbox = checkboxes[0] as HTMLInputElement
      await user.click(propertyCheckbox)
    }
    
    if (textareas.length > 0) {
      const notesArea = textareas[0] as HTMLTextAreaElement
      await user.clear(notesArea)
      await user.type(notesArea, 'Magic weapon properties')
      expect(notesArea.value).toBe('Magic weapon properties')
    }
    
    expect(checkboxes.length >= 0 && textareas.length >= 0).toBe(true)
  })

  it('should handle load/weight management and encumbrance', async () => {
    const user = userEvent.setup()
    
    render(<CharacterSheet />)
    
    await waitFor(() => {
      expect(screen.queryAllByRole('tab').length).toBeGreaterThan(0)
    }, { timeout: 2000 })
    
    const itemsTab = screen.getByRole('tab', { name: /items/i })
    await user.click(itemsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('item')
    }, { timeout: 2000 })
    
    // Test load/weight calculations
    const numericInputs = document.querySelectorAll('input[type="number"]')
    
    if (numericInputs.length > 1) {
      const weightInput = numericInputs[1] as HTMLInputElement
      await user.clear(weightInput)
      await user.type(weightInput, '10')
      expect(weightInput.value).toBe('10')
    }
    
    expect(numericInputs.length >= 0).toBe(true)
  })

  it('should handle currency and treasure management', async () => {
    const user = userEvent.setup()
    
    render(<CharacterSheet />)
    
    await waitFor(() => {
      expect(screen.queryAllByRole('tab').length).toBeGreaterThan(0)
    }, { timeout: 2000 })
    
    const itemsTab = screen.getByRole('tab', { name: /items/i })
    await user.click(itemsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('item')
    }, { timeout: 2000 })
    
    // Test currency fields
    const currencyInputs = document.querySelectorAll('input[type="number"]')
    
    if (currencyInputs.length > 0) {
      const goldInput = currencyInputs[0] as HTMLInputElement
      await user.clear(goldInput)
      await user.type(goldInput, '100')
      expect(goldInput.value).toBe('100')
    }
    
    expect(currencyInputs.length >= 0).toBe(true)
  })

  it('should save item changes and trigger auto-save functionality', async () => {
    const user = userEvent.setup()
    
    render(<CharacterSheet />)
    
    await waitFor(() => {
      expect(screen.queryAllByRole('tab').length).toBeGreaterThan(0)
    }, { timeout: 2000 })
    
    const itemsTab = screen.getByRole('tab', { name: /items/i })
    await user.click(itemsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('item')
    }, { timeout: 2000 })
    
    // Test auto-save by modifying a field
    const inputs = document.querySelectorAll('input, select, textarea')
    
    if (inputs.length > 0) {
      const firstInput = inputs[0] as HTMLInputElement
      if (firstInput.type === 'text' || firstInput.tagName === 'TEXTAREA') {
        await user.clear(firstInput)
        await user.type(firstInput, 'Test item change')
        
        // Trigger blur to activate auto-save
        fireEvent.blur(firstInput)
        
        expect(firstInput.value).toBe('Test item change')
      }
    }
    
    expect(inputs.length >= 0).toBe(true)
  })

  it('should maintain item data consistency across tab navigation', async () => {
    const user = userEvent.setup()
    
    render(<CharacterSheet />)
    
    await waitFor(() => {
      expect(screen.queryAllByRole('tab').length).toBeGreaterThan(0)
    }, { timeout: 2000 })
    
    // Navigate to items tab
    const itemsTab = screen.getByRole('tab', { name: /items/i })
    await user.click(itemsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('item')
    }, { timeout: 2000 })
    
    // Navigate to another tab and back
    const skillsTab = screen.getByRole('tab', { name: /skills/i })
    await user.click(skillsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('skill')
    }, { timeout: 2000 })
    
    await user.click(itemsTab)
    
    await waitFor(() => {
      const bodyText = document.body.textContent || ''
      expect(bodyText.toLowerCase()).toContain('item')
    }, { timeout: 2000 })
    
    // Verify items tab is accessible and consistent
    expect(itemsTab).toBeTruthy()
  })
})
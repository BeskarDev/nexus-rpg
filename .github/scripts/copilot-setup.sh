#!/bin/bash

# Copilot Agent Environment Setup Script
# This script customizes the environment for GitHub Copilot agents
# Following GitHub's agent customization guidelines

set -e

echo "ðŸ¤– Starting Copilot Agent environment setup for Nexus RPG..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in the right directory
if [[ ! -f "package.json" ]]; then
    log_error "package.json not found. Make sure you're in the project root directory."
    exit 1
fi

# Verify this is the Nexus RPG project
if ! grep -q "nexus-rpg" package.json; then
    log_warning "This doesn't appear to be the Nexus RPG project based on package.json"
fi

log_info "Setting up agent-specific environment variables..."

# Set up environment variables for Copilot agents
export COPILOT_AGENT_MODE=true
export NODE_ENV=${NODE_ENV:-development}
export DOCUSAURUS_SSR_CONCURRENCY=1  # Prevent SSR issues in agent environments

# Agent-specific Docusaurus configuration
export DISABLE_ESLINT_PLUGIN=true    # Reduce noise in agent environments
export GENERATE_SOURCEMAP=false      # Faster builds
export FAST_REFRESH=false           # More stable in agent environments

log_info "Environment variables set for agent mode"

# Create a .env.agent file for persistent agent settings
cat > .env.agent << EOF
# Copilot Agent Environment Configuration
# Generated by copilot-setup.sh

COPILOT_AGENT_MODE=true
NODE_ENV=development
DOCUSAURUS_SSR_CONCURRENCY=1
DISABLE_ESLINT_PLUGIN=true
GENERATE_SOURCEMAP=false
FAST_REFRESH=false

# Nexus RPG specific settings
DOCUSAURUS_DISABLE_HOT_RELOAD_ERROR_OVERLAY=true
EOF

log_success "Created .env.agent configuration file"

# Set up agent-specific npm/yarn scripts
log_info "Configuring agent-optimized commands..."

# Check if this is a development environment setup
if [[ "${GITHUB_ACTIONS}" == "true" ]]; then
    log_info "Running in GitHub Actions environment"
    
    # Optimize for CI/agent usage
    if command -v yarn &> /dev/null && [[ -f "yarn.lock" ]]; then
        log_info "Configuring Yarn for agent mode..."
        yarn config set network-timeout 300000
        yarn config set cache-folder ~/.cache/yarn
    elif command -v npm &> /dev/null; then
        log_info "Configuring NPM for agent mode..."
        npm config set fetch-timeout 300000
        npm config set cache ~/.cache/npm
    fi
fi

# Validate Docusaurus installation
log_info "Validating Docusaurus installation..."

if command -v yarn &> /dev/null && [[ -f "yarn.lock" ]]; then
    if yarn docusaurus --version &> /dev/null; then
        log_success "Docusaurus is properly installed and accessible via Yarn"
        DOCUSAURUS_VERSION=$(yarn docusaurus --version 2>/dev/null | head -n1)
        log_info "Docusaurus version: ${DOCUSAURUS_VERSION}"
    else
        log_error "Docusaurus is not properly installed or accessible"
        exit 1
    fi
elif command -v npm &> /dev/null; then
    if npx docusaurus --version &> /dev/null; then
        log_success "Docusaurus is properly installed and accessible via NPM"
        DOCUSAURUS_VERSION=$(npx docusaurus --version 2>/dev/null | head -n1)
        log_info "Docusaurus version: ${DOCUSAURUS_VERSION}"
    else
        log_error "Docusaurus is not properly installed or accessible"
        exit 1
    fi
fi

# Create helpful aliases for agents
log_info "Setting up agent-friendly command aliases..."

# Create a quick reference file for agents
cat > .copilot-commands.md << EOF
# Copilot Agent Quick Reference - Nexus RPG

## Available Commands

### Development
- \`yarn start\` - Start development server (with hot reload)
- \`yarn build\` - Build the production site
- \`yarn serve\` - Serve the built site locally
- \`yarn clear\` - Clear Docusaurus cache

### Testing
- \`yarn test\` - Run integration tests in watch mode
- \`yarn test:run\` - Run integration tests once (CI mode)
- \`yarn test:ui\` - Run tests with interactive UI
- \`yarn test:coverage\` - Run tests with coverage report

### Formatting & Quality
- \`yarn format\` - Format code with Prettier
- \`yarn tsc:check\` - TypeScript type checking

### Firebase Deployment
- \`yarn deploy\` - Build and deploy to Firebase
- \`yarn firebase:login\` - Login to Firebase
- \`yarn firebase:deploy\` - Deploy to Firebase (after build)

## Project Structure
- \`docs/\` - Markdown documentation files
- \`src/\` - React components and utilities
- \`static/\` - Static assets
- \`docusaurus.config.js\` - Main configuration

## Key Files for Agents
- \`.env.agent\` - Agent-specific environment variables
- \`.copilot-commands.md\` - This reference file
- \`package.json\` - Dependencies and scripts
- \`sidebars.js\` - Documentation navigation

## Tips for Agents
1. Use \`yarn start\` to preview changes in real-time
2. Documentation is in Markdown with MDX support
3. The site auto-rebuilds when files change
4. Check \`docusaurus.config.js\` for site configuration
5. Use environment variables from \`.env.agent\` for optimization
EOF

log_success "Created .copilot-commands.md reference file"

# Set up git configuration for better agent workflows
if [[ "${GITHUB_ACTIONS}" == "true" ]]; then
    log_info "Configuring git for agent workflows..."
    git config --global --add safe.directory "${GITHUB_WORKSPACE:-$(pwd)}"
    git config user.name "Copilot Agent"
    git config user.email "copilot-agent@github.com"
fi

# Final validation
log_info "Running final validation..."

# Check if the build works
if [[ "${GITHUB_ACTIONS}" == "true" ]]; then
    log_info "Skipping build test in CI environment"
else
    log_info "Testing build process..."
    if command -v yarn &> /dev/null && [[ -f "yarn.lock" ]]; then
        if yarn build --out-dir /tmp/test-build &> /dev/null; then
            log_success "Build test passed"
            rm -rf /tmp/test-build
        else
            log_warning "Build test failed, but continuing setup"
        fi
    fi
fi

# Display final status
echo ""
echo "=================================="
log_success "Copilot Agent setup completed!"
echo "=================================="
echo ""
echo "ðŸ“‹ Environment Summary:"
echo "   â€¢ Agent mode: Enabled"
echo "   â€¢ Package manager: $(command -v yarn &> /dev/null && echo "Yarn" || echo "NPM")"
echo "   â€¢ Docusaurus: Ready"
echo "   â€¢ Environment config: .env.agent"
echo "   â€¢ Quick reference: .copilot-commands.md"
echo ""
echo "ðŸš€ Ready for agent operations!"
echo "   Use 'yarn start' to begin development"
echo ""